<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://rcrews.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://rcrews.github.io/" rel="alternate" type="text/html" /><updated>2024-02-23T21:32:44-08:00</updated><id>https://rcrews.github.io/feed.xml</id><title type="html">Robert’s blog</title><subtitle>A place for articles I’ve written.</subtitle><author><name>Robert Crews</name><email></email></author><entry><title type="html">Use JavaScript to Format Dates and Times on the Web</title><link href="https://rcrews.github.io/javascript/2024/02/23/datetime.html" rel="alternate" type="text/html" title="Use JavaScript to Format Dates and Times on the Web" /><published>2024-02-23T18:32:15-08:00</published><updated>2024-02-23T18:32:15-08:00</updated><id>https://rcrews.github.io/javascript/2024/02/23/datetime</id><content type="html" xml:base="https://rcrews.github.io/javascript/2024/02/23/datetime.html"><![CDATA[<p>This article describes a strategy for clarifying meaning when displaying
times and dates on web pages. Confusion comes from omitting the time
zone and when using an ambiguous digit order for the day and month.</p>

<p>This article describes</p>

<ul>
  <li>Changing web pages after they are loaded,</li>
  <li>Using the DOM to manipulate text not delineated by mark-up, and</li>
  <li>Representing times and dates in web pages.</li>
</ul>

<p>Imagine you’re looking at a web page presenting an activity log:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2/8/24 8:03 - Trim hedge
2/8/24 8:16 - Sweep drive
2/8/24 8:34 - Take out trash
</code></pre></div></div>

<p>Morning or evening? Summer or winter? British or American? Maybe I’m
an American writing for a British audience. Maybe I’m a conscientious
American writer who has diligently added ‘u’ characters after all the
‘o’ characters, but somehow just forgot to change the day/month order.
Or is it month/day?</p>

<p>Let’s develop and implement a strategy for representing dates in a
software interface where the language is English, but the audience is
global. Here’s the strategy we’re going to use:</p>

<ul>
  <li>The back-end dev is to write all event time stamps in the HTML in
coordinated universal time using the W3C datetime format.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></li>
  <li>The front-end dev is going to automate the display of the time
stamps to represent them unambiguously for each local reader.</li>
</ul>

<h2 id="the-back-end-dev">The back-end dev</h2>

<p>As backend devs, we’ll log events with compact ISO 8601 time stamps in</p>

<p>Ruby:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">utc</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="s1">'%FT%TZ'</span><span class="p">)</span>
</code></pre></div></div>

<p>Python:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">datetime</span>
<span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">isoformat</span><span class="p">()</span><span class="si">}</span><span class="s">Z</span><span class="sh">"</span>
</code></pre></div></div>

<p>Java:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.time.*</span><span class="o">;</span>
<span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(</span><span class="nc">ZoneOffset</span><span class="o">.</span><span class="na">UTC</span><span class="o">)</span> <span class="o">+</span> <span class="s">"Z"</span><span class="o">;</span>
</code></pre></div></div>

<p>JavaScript:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nc">Date</span><span class="p">().</span><span class="nf">toISOString</span><span class="p">();</span>
</code></pre></div></div>

<p>and deliver HTML that looks something like this:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;pre&gt;</span>
2024-02-09T04:03:14Z - Trim hedge
2024-02-09T04:16:56Z - Sweep drive
2024-02-09T04:34:22Z - Take out trash
<span class="nt">&lt;/pre&gt;</span>
</code></pre></div></div>

<h2 id="the-front-end-dev">The front-end dev</h2>

<p>As front-end devs, we‘ll write JavaScript that scans the page text for
these date stamps, and then replaces them with an unambiguous format
customized for each site visitor.</p>

<h3 id="add-an-event-listener">Add an event listener</h3>

<p>We start by inventing a name for the starting point of our solution,
<code class="language-plaintext highlighter-rouge">localizeIsoStrings</code>, and adding it to the page onload handler so it
runs when the page loads.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">localizeIsoStrings</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>

<span class="nb">window</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">load</span><span class="dl">"</span><span class="p">,</span> <span class="nx">localizeIsoStrings</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="plan-the-mark-up">Plan the mark-up</h3>

<p>We might grumble at the back-end dev for not wrapping each date stamp in
a <code class="language-plaintext highlighter-rouge">span</code> to make each one easy to locate, but we’ll roll with it. We
know that special items on the page need to be identified with semantic
mark-up for both presentation and accessibility. Since this whole
project is about date stamps, date stamps are clearly the special thing
here. When we’re done, we’ll have each date stamp properly wrapped in an
HTML <code class="language-plaintext highlighter-rouge">span</code> element like this:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;span</span>
  <span class="na">class=</span><span class="s">"date localized-iso8601-string"</span>
  <span class="na">title=</span><span class="s">"2024-02-08T20:03:14Z"</span>
  <span class="nt">&gt;</span>Feb 8, 2024 at 08:03:14 PM PST<span class="nt">&lt;/span&gt;</span>
</code></pre></div></div>

<h3 id="implement-the-mark-up-plan">Implement the mark-up plan</h3>

<p>Here’s a function that returns our desired <code class="language-plaintext highlighter-rouge">span</code> mark-up:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">wrapIsoString</span><span class="p">(</span><span class="nx">isoString</span><span class="p">,</span> <span class="nx">transformer</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">span</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">span</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">span</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">date</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">span</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">localize-iso8601-string</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">span</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">isoString</span><span class="p">;</span>
  <span class="nx">span</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nf">transformer</span><span class="p">(</span><span class="nx">isoString</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">span</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The function</p>

<ul>
  <li>Creates a <code class="language-plaintext highlighter-rouge">span</code> element.</li>
  <li>Adds a <code class="language-plaintext highlighter-rouge">class</code> attribute with two classes: one a generic “date” and one
specific to the project, “localize-iso8601-string“.</li>
  <li>Adds a <code class="language-plaintext highlighter-rouge">title</code> attribute with its value set to the original datetime
format. In modern browsers, readers who hold their mouse pointer over
an element with a title attribute for about two seconds will see the
content of the title attribute appear in a pop-up.</li>
  <li>Calls for a localized date stamp and adds it into
the element’s text content, which will be immediately visible to
visitors.</li>
  <li>Returns the <code class="language-plaintext highlighter-rouge">span</code> element.</li>
</ul>

<h3 id="transformation-first-version">Transformation, first version</h3>

<p>For the transformation, let’s start with an obvious solution:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="dl">"</span><span class="s2">2024-02-08T20:03:14Z</span><span class="dl">"</span><span class="p">).</span><span class="nf">toLocaleString</span><span class="p">();</span>
<span class="err">⬅︎</span> <span class="dl">"</span><span class="s2">2/8/2024, 12:03:14 PM</span><span class="dl">"</span>
</code></pre></div></div>

<p>Then wrap that in a function so we can reference it in our program:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">localDateString</span><span class="p">(</span><span class="nx">dateTime</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="nx">dateTime</span><span class="p">).</span><span class="nf">toLocaleString</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This function</p>

<ul>
  <li>Receives the datetime-formatted string</li>
  <li>Parses it into a <code class="language-plaintext highlighter-rouge">Date</code> object</li>
  <li>Creates a default localized string from the object</li>
  <li>Returns the localized string</li>
</ul>

<p>Turns out this is not going to be exactly what we need. The <em>time zone</em>,
which is critical for our solution, is missing. We’ll use it as a
placeholder, though, and improve it later.</p>

<h3 id="using-a-regular-expression-to-find-datetimes">Using a regular expression to find datetimes</h3>

<p>Since our back-end dev did not identify the date stamps with mark-up,
we’re going to be scanning text for a datetime pattern. Scanning text
for patterns can be a problem because the text we’re hoping to match
comes mixed among an enormous variety of words and character
constructions. Some people, when confronted with such a problem, think
“I know, I’ll use regular expressions.”<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> Which is exactly what we’re
going to do:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">iso8601</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RegExp</span><span class="p">(</span><span class="sr">/</span><span class="se">(\d{4}</span><span class="sr">-</span><span class="se">\d{2}</span><span class="sr">-</span><span class="se">\d{2}[</span><span class="sr">:.T</span><span class="se">\d]</span><span class="sr">*Z</span><span class="se">)</span><span class="sr">/</span><span class="p">);</span>
</code></pre></div></div>

<p>This regular expression matches text that is</p>

<ul>
  <li>Four digits, followed by</li>
  <li>A hyphen, followed by</li>
  <li>Two digits, followed by</li>
  <li>A hyphen, followed by</li>
  <li>Two digits, followed by</li>
  <li>Any number of any of the following characters in any order
    <ul>
      <li>A colon</li>
      <li>A decimal point</li>
      <li>A capital ‘T’</li>
      <li>Any digit zero through 9</li>
    </ul>
  </li>
  <li>Followed ultimately by a capital ‘Z’</li>
</ul>

<p>The regular expression also uses parentheses—just inside the forward
slashes that delineate the regular expression—to create a <em>capture
group</em>. This capture group turns out to be essential for our purpose:
Its utility will become clear later on.</p>

<h3 id="find-on-page-its-not-that-simple">Find on page? It’s not that simple</h3>

<p>The document object model, which front-end devs use to explore and
change HTML pages, gives good access to</p>

<ul>
  <li>HTML elements</li>
  <li>HTML element attributes</li>
  <li>HTML element text content</li>
</ul>

<p>The DOM, though, does not have tools to identify a phrase of text from
within an element, nor, naturally, does it provide tools to replace that
phrase with an element, such as—to our purpose—a <code class="language-plaintext highlighter-rouge">span</code> element.</p>

<p><img src="/assets/posts/datetime/a-good-example.png" alt="Inserting a span creates a new node" /></p>

<p>The go-to function for locating page content, <code class="language-plaintext highlighter-rouge">querySelectorAll</code>, does
not have a polymorph that accepts our regular expression, or anything of
the sort. We’ll need a different solution.</p>

<h3 id="our-driver-function">Our driver function</h3>

<p>Returning to our <code class="language-plaintext highlighter-rouge">localizeIsoStrings(event)</code> function, we know that we
aren’t going to do anything with the <code class="language-plaintext highlighter-rouge">event</code> object passed. The
JavaScript convention for identifying parameters that you
receive, but that you are not going to use, is to prepend it with an
underscore:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">localizeIsoStrings</span><span class="p">(</span><span class="nx">_event</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Our strategy will be to visit each node in the DOM looking for text,
and, when text is found, scanning the text for the phrase we’re looking
for. Once found, we’ll create new text, wrap the new text into a <code class="language-plaintext highlighter-rouge">span</code>
element, and then replace the found text with our created <code class="language-plaintext highlighter-rouge">span</code> element.</p>

<p>The DOM is a tree structure of nodes. The process of visiting each node
is known as <em>walking the DOM</em>. Turns out, most browsers support a
function called <code class="language-plaintext highlighter-rouge">TreeWalker</code> for doing this. Unfortunately, although
<code class="language-plaintext highlighter-rouge">TreeWalker</code> makes it easy to retrieve content from various places in
your page, it doesn’t have good support for changing those pieces when
you find them. So we’ll roll our own walker.</p>

<h3 id="walking-the-dom">Walking the DOM</h3>

<p>The typical pattern for visiting nodes in this fashion is to start with
one node, get a list of its children, and then process each child in
turn. If any child has children of its own, recurse into that child and
so on till you run out of children.</p>

<p>Because we’re going to recurse, our <code class="language-plaintext highlighter-rouge">localizeIsoStrings</code> function will
merely start the walk by identifying the node to start from and the
pattern to search for. We’ll insert our regular expression outside our
recursion so we don’t waste time and memory creating and destroying
objects with each iteration.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">nodeWalker</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">re</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">localizeIsoStrings</span><span class="p">(</span><span class="nx">_event</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">iso8601</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RegExp</span><span class="p">(</span><span class="sr">/</span><span class="se">(\d{4}</span><span class="sr">-</span><span class="se">\d{2}</span><span class="sr">-</span><span class="se">\d{2}[</span><span class="sr">-:.T</span><span class="se">\d]</span><span class="sr">*Z</span><span class="se">)</span><span class="sr">/</span><span class="p">);</span>
  <span class="nf">nodeWalker</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="nx">iso8601</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="add-the-first-guard-clause-start-the-loop">Add the first guard clause, start the loop</h4>

<p>Since we’re looking for text nodes only, and since text nodes never have
child nodes, we can skip childless nodes: No text there. Then we’ll
start our loop:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">nodeWalker</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">re</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">node</span><span class="p">.</span><span class="nf">hasChildNodes</span><span class="p">())</span> <span class="k">return</span><span class="p">;</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">child</span> <span class="k">of</span> <span class="nx">node</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="add-guard-clauses-in-the-loop">Add guard clauses in the loop</h4>

<p>Within our loop, we want to start another iteration if the child is an
element node, which might contain text, and then shortcut the loop if
the current node is, itself, not a text node and therefore not
interesting to us. Add two guard clauses:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">nodeWalker</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">re</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">node</span><span class="p">.</span><span class="nf">hasChildNodes</span><span class="p">())</span> <span class="k">return</span><span class="p">;</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">child</span> <span class="k">of</span> <span class="nx">node</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="nx">Node</span><span class="p">.</span><span class="nx">ELEMENT_NODE</span><span class="p">)</span> <span class="nf">nodeWalker</span><span class="p">(</span><span class="nx">child</span><span class="p">,</span> <span class="nx">re</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">!==</span> <span class="nx">Node</span><span class="p">.</span><span class="nx">TEXT_NODE</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="process-text-nodes">Process text nodes</h4>

<p>At this point, we know our current child node is a text node. If it
wasn’t, we’d have left the loop. So let’s get the text content of the
text node from its <code class="language-plaintext highlighter-rouge">textContent</code> property:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">child</span><span class="p">.</span><span class="nx">textContent</span>
</code></pre></div></div>

<h5 id="stringsplit">String.split()</h5>

<p>Now we’ll split the string into an array of strings. We’ll split the
string on the pattern of the datetime string we’re looking for. The
JavaScript <code class="language-plaintext highlighter-rouge">split</code> method takes either a string or a regular expression.
In typical use, these separators are discarded:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">Fly, you fools!</span><span class="dl">"</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="se">\</span><span class="s2">s+/</span><span class="dl">"</span><span class="p">);</span>
<span class="err">⬅︎</span> <span class="err">▶︎</span> <span class="nc">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">[</span> <span class="dl">"</span><span class="s2">Fly,</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">you</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">fools!</span><span class="dl">"</span> <span class="p">]</span>
</code></pre></div></div>

<p>Note how in the above split, the space characters are gone. None of the
strings in the array contain spaces, and if we join the array of strings
back into a single string, it looks wrong:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="dl">"</span><span class="s2">Fly,</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">you</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">fools!</span><span class="dl">"</span><span class="p">].</span><span class="nf">join</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>
<span class="err">⬅︎</span> <span class="dl">"</span><span class="s2">Fly,youfools!</span><span class="dl">"</span>
</code></pre></div></div>

<p>However, if you include a capture group in your regular expression by
including parentheses, the split function splits the string at the
beginnings and ends of the group and inserts the match between:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">Fly, you fools!</span><span class="dl">"</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">/(</span><span class="se">\</span><span class="s2">s+)/</span><span class="dl">"</span><span class="p">);</span>
<span class="err">⬅︎</span> <span class="err">▶︎</span> <span class="nc">Array</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="p">[</span> <span class="dl">"</span><span class="s2">Fly,</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">you</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">fools!</span><span class="dl">"</span> <span class="p">]</span>
</code></pre></div></div>

<p>As you remember, we wrapped our regular expression for matching
datetimes within parentheses so when we split on it, we get an array of
strings, with zero or more of the strings in the array exactly matching
our datetime pattern.</p>

<h5 id="process-each-segment-in-the-split-string">Process each segment in the split string</h5>

<p>The next step is to use the <code class="language-plaintext highlighter-rouge">map</code> method (of big data map/reduce fame)
to evaluate each element in the array. If the string matches our
datetime pattern, then replace it with our replacement <code class="language-plaintext highlighter-rouge">span</code> element,
else convert the string back into a text node. Now we have an array of
nodes: zero or more are text nodes, and zero or more are <code class="language-plaintext highlighter-rouge">span</code> element
nodes.</p>

<h5 id="remove-zero-length-text-nodes">Remove zero length text nodes</h5>

<p>A final optimization: Filter the resulting array to remove any text
nodes where the length of the represented string is zero characters
long. The zero-length nodes won’t be visible on the web page, but there
is no point is adding meaningless nodes to the DOM for the browser to
keep track of.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">123</span><span class="dl">"</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">/(</span><span class="se">\</span><span class="s2">d+)/</span><span class="dl">"</span><span class="p">);</span>
<span class="err">⬅︎</span> <span class="err">▶︎</span> <span class="nc">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">[</span> <span class="dl">""</span><span class="p">,</span> <span class="dl">"</span><span class="s2">123</span><span class="dl">"</span><span class="p">,</span> <span class="dl">""</span> <span class="p">]</span>
</code></pre></div></div>

<h4 id="the-nodes-array">The nodes array</h4>

<p>We’re going to work all that whole logic into one step and call the
resulting array of nodes, “nodes”:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">nodeWalker</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">re</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">node</span><span class="p">.</span><span class="nf">hasChildNodes</span><span class="p">())</span> <span class="k">return</span><span class="p">;</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">child</span> <span class="k">of</span> <span class="nx">node</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="nx">Node</span><span class="p">.</span><span class="nx">ELEMENT_NODE</span><span class="p">)</span> <span class="nf">nodeWalker</span><span class="p">(</span><span class="nx">child</span><span class="p">,</span> <span class="nx">re</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">!==</span> <span class="nx">Node</span><span class="p">.</span><span class="nx">TEXT_NODE</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">nodes</span> <span class="o">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">textContent</span>
      <span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="nx">re</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">segment</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">re</span><span class="p">.</span><span class="nf">test</span><span class="p">(</span><span class="nx">segment</span><span class="p">)</span>
          <span class="p">?</span> <span class="nf">wrapIsoString</span><span class="p">(</span><span class="nx">segment</span><span class="p">,</span> <span class="nx">localIso8601String</span><span class="p">)</span>
          <span class="p">:</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createTextNode</span><span class="p">(</span><span class="nx">segment</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="nf">filter</span><span class="p">((</span><span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">i</span><span class="p">.</span><span class="nx">textContent</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="create-a-document-fragment-to-contain-our-nodes">Create a document fragment to contain our nodes</h4>

<p>Now we just have to replace the current node with the nodes stored in
our “nodes” array. The <code class="language-plaintext highlighter-rouge">replaceWith</code> method does not accept an array of
nodes, but it does accept a document fragment object. So, we’ll create a
document fragment, populate it with the nodes, and then replace our text
node child with the resulting object:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">nodeWalker</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">re</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">node</span><span class="p">.</span><span class="nf">hasChildNodes</span><span class="p">())</span> <span class="k">return</span><span class="p">;</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">child</span> <span class="k">of</span> <span class="nx">node</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="nx">Node</span><span class="p">.</span><span class="nx">ELEMENT_NODE</span><span class="p">)</span> <span class="nf">nodeWalker</span><span class="p">(</span><span class="nx">child</span><span class="p">,</span> <span class="nx">re</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">!==</span> <span class="nx">Node</span><span class="p">.</span><span class="nx">TEXT_NODE</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">nodes</span> <span class="o">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">textContent</span>
      <span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="nx">re</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">segment</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">re</span><span class="p">.</span><span class="nf">test</span><span class="p">(</span><span class="nx">segment</span><span class="p">)</span>
          <span class="p">?</span> <span class="nf">wrapIsoString</span><span class="p">(</span><span class="nx">segment</span><span class="p">,</span> <span class="nx">localDateString</span><span class="p">)</span>
          <span class="p">:</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createTextNode</span><span class="p">(</span><span class="nx">segment</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="nf">filter</span><span class="p">((</span><span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">i</span><span class="p">.</span><span class="nx">textContent</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">df</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DocumentFragment</span><span class="p">();</span>
    <span class="nx">nodes</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">df</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nx">i</span><span class="p">));</span>
    <span class="nx">child</span><span class="p">.</span><span class="nf">replaceWith</span><span class="p">(</span><span class="nx">df</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Note that the the “true” fork of the <code class="language-plaintext highlighter-rouge">map</code> lambda calls the
<code class="language-plaintext highlighter-rouge">wrapIsoString</code> function that we wrote earlier. Also note that the
<code class="language-plaintext highlighter-rouge">wrapIsoString</code> function takes two parameters: a <code class="language-plaintext highlighter-rouge">isoString</code> and a
<code class="language-plaintext highlighter-rouge">transformer</code> function. The <code class="language-plaintext highlighter-rouge">transformer</code> function we’re calling here is
the one we wrote earlier called <code class="language-plaintext highlighter-rouge">localDateString</code>.</p>

<h3 id="our-first-run">Our first run</h3>

<p>At this point, our implementation should be functional. Let’s try it
out:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en-US"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
<span class="nt">&lt;title&gt;</span>Local ISO 8601 Demonstration<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;h1&gt;</span>Local ISO 8601 Demonstration<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;pre&gt;</span>
2024-02-08T20:03:14Z - Trim hedge
2024-02-08T20:16:56Z - Sweep drive
2024-02-08T20:34:22Z - Take out trash
<span class="nt">&lt;/pre&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"script.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><img src="/assets/posts/datetime/local-dates1.png" alt="Localized dates, pop-up showing, no time zone" /></p>

<p>As expected, localized time stamps with the mouse-over pop-up are working,
but time zones are not displayed. So we’ll return to our <code class="language-plaintext highlighter-rouge">localDateString</code>
transformer function.</p>

<h3 id="search-mdn-for-format-date">Search MDN for “format date”</h3>

<p>We’ll search the docs for an API dedicated to formatting dates,
“<a href="https://developer.mozilla.org/en-US/search?q=format+date">format date</a>”,
and locate <code class="language-plaintext highlighter-rouge">Intl.DateTimeFormat</code>. The example in the docs is basically
this, which looks promising:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nx">Intl</span><span class="p">.</span><span class="nc">DateTimeFormat</span><span class="p">(</span><span class="dl">"</span><span class="s2">en-GB</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">dateStyle</span><span class="p">:</span> <span class="dl">"</span><span class="s2">full</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">timeStyle</span><span class="p">:</span> <span class="dl">"</span><span class="s2">long</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">timeZone</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Australia/Sydney</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">}).</span><span class="nf">format</span><span class="p">(</span><span class="k">new</span> <span class="nc">Date</span><span class="p">());</span>
<span class="err">⬅︎</span> <span class="dl">"</span><span class="s2">Tuesday, 20 February 2024 at 13:11:31 GMT+11</span><span class="dl">"</span>
</code></pre></div></div>

<p>A close reading of the docs, trial and error at the console, and a bit
of Googling gets us the proper option values, and a call to <code class="language-plaintext highlighter-rouge">replace</code>
removes the “at”:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nx">Intl</span><span class="p">.</span><span class="nc">DateTimeFormat</span><span class="p">(</span><span class="nb">navigator</span><span class="p">.</span><span class="nx">language</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">dateStyle</span><span class="p">:</span> <span class="dl">"</span><span class="s2">medium</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">timeStyle</span><span class="p">:</span> <span class="dl">"</span><span class="s2">long</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">}).</span><span class="nf">format</span><span class="p">(</span><span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="dl">"</span><span class="s2">2024-02-08T20:03:14Z</span><span class="dl">"</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="dl">"</span><span class="se">\</span><span class="s2">x20at</span><span class="dl">"</span><span class="p">,</span> <span class="dl">""</span><span class="p">);</span>
<span class="err">⬅︎</span> <span class="dl">"</span><span class="s2">Feb 8, 2024 12:03:14 PM PST</span><span class="dl">"</span>
</code></pre></div></div>

<p>As before, we’ll wrap this in a function so we can reference it in our
program:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">localDateString</span><span class="p">(</span><span class="nx">dateTime</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">Intl</span><span class="p">.</span><span class="nc">DateTimeFormat</span><span class="p">(</span><span class="nb">navigator</span><span class="p">.</span><span class="nx">language</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">dateStyle</span><span class="p">:</span> <span class="dl">"</span><span class="s2">medium</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">timeStyle</span><span class="p">:</span> <span class="dl">"</span><span class="s2">long</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">}).</span><span class="nf">format</span><span class="p">(</span><span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="nx">dateTime</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="dl">"</span><span class="se">\</span><span class="s2">x20at</span><span class="dl">"</span><span class="p">,</span> <span class="dl">""</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="our-second-run">Our second run</h3>

<p><img src="/assets/posts/datetime/local-dates2.png" alt="Localized dates, pop-up showing, correct time zone" /></p>

<p>Success! The HTML is delivered one way for every reader, and each
reader’s browser formats the dates according to the reader’s own locale.
Done.</p>

<p>And the back-end dev is still muttering about logins, user profiles,
locale preferences, databases, front-end bloat, and how it would
therefore be easier to simply deliver the desired date formats right in
the HTML specifically as the user wants it with every request. Uh-huh.</p>

<p style="display:flex;justify-content:right;">🐉</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Misha Wolf and Charles Wicksteed, “<a href="https://www.w3.org/TR/NOTE-datetime">Date and Time Formats</a>”, W3C Note. Sept. 15 1997. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Jamie Zawinski, Usenet posting in alt.religion.emacs Aug. 12, 1997. Via Jeffrey Friedl, “<a href="http://regex.info/blog/2006-09-15/247">Source of the famous ‘Now you have two problems’ quote</a>”, Jeffrey Friedl’s Blog, Sept. 15, 2006. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Robert Crews</name></author><category term="JavaScript" /><summary type="html"><![CDATA[This article describes a strategy for clarifying meaning when displaying times and dates on web pages. Confusion comes from omitting the time zone and when using an ambiguous digit order for the day and month.]]></summary></entry></feed>